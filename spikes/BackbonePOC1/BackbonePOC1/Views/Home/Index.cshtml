@{
    ViewBag.Title = "Index";
}

@if (false)
{
    <script type="text/javascript" src="../../Scripts/jquery-1.7.1-vsdoc.js"></script>
    <script type="text/javascript" src="../../Scripts/underscore.js"></script>
    <script type="text/javascript" src="../../Scripts/backbone.js"></script>
}

<!-- we passed a "categories" context variable (array), we now have a categories free variable over to iterate -->
<!-- each of them is a model with the fields to display -->
<!-- also, these comments are outside because underscode.js breaks with comments in the template -->
<script type="text/template" id="categorySelection_template">
    <label for="categorySelection">Category:</label>
    <select id="categorySelection">
        <% 
            _.each(categories, function(category) { 

        %>
                <option value="<%= category.get('code') %>"><%= category.get('description') %></option> 
        <% 
            });
        %>
    </select>
</script>

<script type="text/template" id="categoryConfiguration_template">
</script>

<script language="javascript">
    $(function () {
        window.Category = Backbone.Model.extend({
            defaults: {
                code: '',
                description: '',
                facets: []
            },
            initialize: function () {
                console.debug("CategoryModel: Initializing '" + this.get("code") + "' category.");
            }
        });

        window.CategoryCollection = Backbone.Collection.extend({
            model: Category,
            url: "/Home/getCategories"
        });

        window.CategorySelectionView = Backbone.View.extend({
            el: $("#categorySelection_container"),
            template: function (categories) {
                return _.template($('#categorySelection_template').html(), { categories: categories }); // we return the same function with the context object assigned
            },
            render: function () {
                $(this.el).html(
                    this.template(this.model) // we pass the model (array) to the template, for some reason the template function does not have automatic access to this.model
                );
                return this;
            },

            initialize: function () {
                console.debug("CategorySelectionView: Initializing");
                this._currentlyDisplayedDetailsView = null;
            },

            /* beginning of event handlers */
            events: {
                "change #categorySelection": "selectCategory"
            },

            selectCategory: function (e) {
                var newVal = $(e.currentTarget).val();
                console.log("CategorySelectionView: Category changed to " + newVal);

                var newModel = _.filter(this.model, function (m) { return m.get('code') == newVal }); // filter to the correct one, based on the code
                if (!newModel) return; // if we didn't find it, abort

                var newView = new CategoryDetailsView({ model: newModel });
                newView.render();
            }
            /* end of event handlers */
        });

        window.CategoryDetailsView = Backbone.View.extend({
            el: $('#categoryDetails_container'),
            template: _.template($('#categoryDetails_template').html()),
            render: function () {
                $(this.el).html(
                    this.template(this.model)
                );
                return this;
            },
            initialize: function () {
                console.log("CategoryDetailsView: Initializing");
                //this.model.bind('change', this.render, this);
                //this.model.bind('destroy', this.remove, this);
            },
            remove: function () {
                this.$el.remove();
            },

            /* begin event binding */
            //TODO: data binding to modify the model directly
            events: {
                'change #searchResultsView': 'changeSearchResultsView',
                'click .categoryFacetList li': 'clickFacet',
                'click .categoryConfigurationSave': 'clickSave',
                'click .categoryConfigurationCancel': 'clickCancel'
            },
            changeSearchResultsView: function (e) {
                console.log('CategoryDetailsView: changeSearchResultsView');
            },
            clickFacet: function (e) {
                console.log('CategoryDetailsView: clickFacet');
            },
            clickSave: function (e) {
                console.log('CategoryDetailsView: clickSave');
                console.log(this.model);
            },
            clickCancel: function (e) {
                console.log('CategoryDetailsView: clickCancel');
                this.remove();
            }
            /* end event binding */
        });

        var categories = new CategoryCollection();
        categories.fetch({ // bring the data from the server
            success: function () { // only when we get the data back
                console.log('Categories retrieved from server and instantiated.');
                var categorySelectionView = new CategorySelectionView({ model: categories.models });
                categorySelectionView.render();
            }
        });
    });
</script>

<div id="categorySelection_container">
</div>

<hr />

<div id="categoryDetails_container">
</div>

<script type="text/template" id="categoryDetails_template">
    <h2><%= name %></h2>
    <label for="searchResultsView">Search Results View:</label>

    <select id="searchResultsView">
        <option value="List">List</option>
        <option value="Grid">Grid</option>
    </select>
    <div class="categoryFacetList">
        <label>Facets</label>
        <ul> 
            <li>Category</li>
            <li>Manufacturer</li>
        </ul>
    </div>

    <button class="categoryConfigurationSave">Save</button>
    <button class="categoryConfigurationCancel">Cancel</button>
</script>
