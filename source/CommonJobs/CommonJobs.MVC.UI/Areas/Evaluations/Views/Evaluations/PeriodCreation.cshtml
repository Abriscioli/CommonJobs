@model CommonJobs.Mvc.UI.Areas.Evaluations.Models.PeriodCreation
@{
    ViewBag.Title = "Generate Evaluations";
    Layout = "~/Areas/Evaluations/Views/Shared/_Layout.cshtml";
    ScriptManager.RegisterCss(Url.Content("~/Content/twitter-bootstrap/less/bootstrap.less"), priority: 900);
    ScriptManager.RegisterCss(Url.Content("~/Content/twitter-bootstrap/less/responsive.less"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Scripts/underscore.js"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Scripts/jquery-1.7.2.min.js"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Content/twitter-bootstrap/js/bootstrap-typeahead.js"), priority: 900);
    ScriptManager.RegisterGlobalJavascript("baseUrl", Url.Content("~"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Scripts/url-generator.js"), priority: 900);

    ScriptManager.RegisterCss(Url.Content("~/Content/Evaluations/evaluations.css"));
    ScriptManager.RegisterJs(Url.Content("~/Scripts/underscore.js"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Scripts/knockout-2.2.0.js"), priority: 900);
    ScriptManager.RegisterJs(Url.Content("~/Scripts/evaluations.js"));
}

<div class="content">
    <h2 class="title">Generar Evaluación</h2>
    <table>
        <thead>
            <tr>
                <th>Empleado</th>
                <th>Posicion</th>
                <th>Seniority</th>
                <th>Responsable</th>
            </tr>
        </thead>
        <tbody data-bind="foreach: employees">
            <tr>
                <td data-bind="text: employeeName"></td>
                <td data-bind="text: currentPosition"></td>
                <td data-bind="text: seniority"></td>
                <td>
                    <input class="evaluation-owner-field" data-bind="value: responsible" autocomplete="off"/>
                </td>
            </tr>
        </tbody>
    </table>
    <button type="submit" class="generar-evaluacion">GENERAR EVALUACION</button>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        var viewmodel;

        var PeriodCreation = function (data) {
            this.employees = ko.observableArray();
            if (data) {
                this.fromJS(data);
            }
        }

        PeriodCreation.prototype.fromJS = function (data) {
            this.employees(_.map(data.Employees, function (e) {
                return new Employee(e);
            }));
        }
        PeriodCreation.prototype.toJs = function () {
            return {
                Employees: _.map(this.employees(), function (e) {
                    return e.toJs();
                })
            }
        }

        var Employee = function (data) {
            this.id = '';
            this.userName = '';
            this.responsible = ko.observable('');
            this.employeeName = '';
            this.currentPosition = '';
            this.seniority = '';
            if (data) {
                this.fromJs(data);
            }
        }

        Employee.prototype.fromJs = function (data) {
            this.id = data.Id;
            this.userName = data.UserName;
            this.responsible(data.Responsible || '');
            this.employeeName = data.EmployeeName;
            this.currentPosition = data.CurrentPosition;
            this.seniority = data.Seniority;
        }

        Employee.prototype.toJs = function () {
            return {
                UserName: this.userName,
                Responsible: this.responsible(),
                CurrentPosition: this.currentPosition,
                Seniority: this.seniority,
                EmployeeName: this.employeeName
            };
        }

        $.getJSON("/Evaluations/api/getEmployeesToGenerateEvalution", function (model) {
            viewmodel = new PeriodCreation(model);
            ko.applyBindings(viewmodel);
            $('.evaluation-owner-field').each(function (index, elem) {
                commonSuggest(elem, 'UserName');
            });
        });

        $('button.generar-evaluacion').on('click', function () {
            var model = viewmodel.toJs();
            var modelFiltered = _.filter(model, function (e) {
                if (e.responsible() && !e.creationDate) {
                    return e.toJs();
                }
            });
            $.ajax("/Evaluations/api/GenerateEvalutions", {
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(modelFiltered),
                error: function (jqXHR) {
                    debugger;
                },
                success: function () {
                    debugger;
                }
            });
        });
    });
</script>
